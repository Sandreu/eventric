{"name":"eventric.js","tagline":"Build web applications based on Domain-driven Design and Layered Architecture.","body":"## Philosophy\r\n\r\n* Emphasize [Domain-driven design](https://www.goodreads.com/book/show/179133.Domain_Driven_Design), [Event-driven architecture](https://www.goodreads.com/book/show/12369902-event-centric) and [Task-based UIs](http://cqrs.wordpress.com/documents/task-based-ui).\r\n* Put the the Domain Model in the very center of your Layered Architecture ([Onion](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/) / [Hexagonal](http://alistair.cockburn.us/Hexagonal+architecture))\r\n* Explicitly set boundaries for parts of your application ([BoundedContexts](https://en.wikipedia.org/wiki/Domain-driven_design#Bounded_context) / [MicroServices](http://martinfowler.com/articles/microservices.html))\r\n* Separation of concerns using Commands and Queries ([CQRS](http://msdn.microsoft.com/en-us/library/jj554200.aspx))\r\n* Capture all changes to your application state as a sequence of events ([EventSourcing](http://martinfowler.com/eaaDev/EventSourcing.html) / [DomainEvents](http://www.udidahan.com/2009/06/14/domain-events-salvation/))\r\n\r\n\r\n## Quick Start\r\n\r\nHaving discussed the upcoming **TodoApp Project** with the Business-Experts and fellow Developers it got clear that we should start with a `BoundedContext` named `Collaboration`.\r\n\r\n\r\n### [Setup BoundedContext](https://github.com/efacilitation/eventric/wiki/eventric#eventricboundedcontext)\r\n\r\n> Hint: You should `npm install eventric` and `npm install eventric-store-mongodb` first.\r\n\r\nLet's get right into it and create our `BoundedContext`\r\n\r\n```javascript\r\neventric = require('eventric');\r\n\r\ncollaborationContext = eventric.boundedContext();\r\n```\r\n\r\n### [Adding Aggregate](https://github.com/efacilitation/eventric/wiki/BoundedContext#addaggregate)\r\n\r\nNow that we created the `collaborationContext` let's add our `Todo` Aggregate, consisting of a simple `changeDescription` method.\r\n\r\n```javascript\r\ncollaborationContext.addAggregate('Todo', {\r\n  changeDescription: function(description) {\r\n    this.description = description;\r\n  }\r\n});\r\n```\r\n> Hint: values assigned to `this.` are automatically part of the generated `DomainEvent`\r\n\r\n### [Adding Commands](https://github.com/efacilitation/eventric/wiki/BoundedContext#addcommand)\r\n\r\nTo actually work with the `BoundedContext` from the outside world we need `commands` and `queries`. Let's start by adding a simple `command` that will create an instance of our `Todo` Aggregate.\r\n\r\n```javascript\r\ncollaborationContext.addCommand('createTodo', function(params, callback) {\r\n  this.aggregate.create('Todo', callback);\r\n});\r\n```\r\n> Hint: `this.aggregate` is dependency injected\r\n\r\nIt would be nice if we could change the description of the `Todo`, so let's add this `command` too.\r\n\r\n```javascript\r\ncollaborationContext.addCommand('changeTodoDescription', function(params, callback) {\r\n  this.aggregate.command('Todo', params.id, 'changeDescription', params.description, callback);\r\n});\r\n```\r\n> Hint: If successful this will trigger a *Todo:changeDescription* `DomainEvent`\r\n\r\n### [Adding Query](https://github.com/efacilitation/eventric/wiki/BoundedContext#addquery)\r\n\r\nAnd last but not least we want the ability to `query` for a `Todo` by its id.\r\n\r\n```javascript\r\ncollaborationContext.addQuery('getTodoById', function(params, callback) {\r\n  this.repository('Todo').findById(params.id, callback);\r\n});\r\n```\r\n> Hint: `this.repository` is dependency injected\r\n\r\n### Executing [Commands](https://github.com/efacilitation/eventric/wiki/BoundedContext#command) and [Queries](https://github.com/efacilitation/eventric/wiki/BoundedContext#query)\r\n\r\nInitialize the `collaborationContext`, create a `Todo`, change the description of it and finally query the description again.\r\n\r\n```javascript\r\ncollaborationContext.initialize(function() {\r\n  collaborationContext.command({\r\n    name: 'createTodo'\r\n  },\r\n  function(err, todoId) {\r\n    collaborationContext.command({\r\n      name: 'changeTodoDescription',\r\n      params: {\r\n        id: todoId,\r\n        description: 'Do something'\r\n      }\r\n    },\r\n    function(err, status) {\r\n      collaborationContext.query({\r\n        name: 'getTodoById',\r\n        params: {\r\n          id: todoId\r\n        }\r\n      },\r\n      function(err, readTodo) {\r\n          console.log(readTodo.description);\r\n      })\r\n    });\r\n  });\r\n\r\n});\r\n```\r\n> `eventric` will implement [promises](https://github.com/kriskowal/q) to avoid such a \"[Pyramid of Doom](http://calculist.org/blog/2011/12/14/why-coroutines-wont-work-on-the-web/)\" in the future.\r\n\r\nThis will output `Do something`. Your `Todo` Aggregate is now persisted using EventSourcing.\r\n\r\nCongratulations, you have successfully applied DDD (tactical+technical) and CQRS! :)\r\n\r\n\r\n## Running Tests\r\n\r\nTo execute all (client+server) tests, use:\r\n\r\n```shell\r\ngulp spec\r\n```\r\n\r\nYou can watch for file-changes with\r\n\r\n```shell\r\nNODE_ENV=workstation gulp watch\r\n```\r\n\r\n\r\n## License\r\n\r\nMIT\r\n\r\nCopyright (c) 2013-2014 SixSteps Team, eFa GmbH\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}