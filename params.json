{"name":"eventric.js","tagline":"Build web applications based on Domain-driven Design","body":"> Not released yet. This hint will disappear with version 0.1.0.\r\n\r\n## Features\r\n\r\n**DDD BuildingBlocks**\r\n* BoundedContext\r\n* DomainEvent\r\n* Aggregate\r\n\r\n**CQRS**\r\n* Persistent ReadModels and ProcessManagers\r\n* Support for Occasionally Connected Applications\r\n\r\n**EventSourcing**\r\n* Automated saving and applying of DomainEvents\r\n* Multiple Store Adapters\r\n\r\n\r\n## Philosophy\r\n\r\n* Emphasize [Domain-driven design](https://www.goodreads.com/book/show/179133.Domain_Driven_Design), [Event-driven architecture](https://www.goodreads.com/book/show/12369902-event-centric) and [Task-based UIs](http://cqrs.wordpress.com/documents/task-based-ui).\r\n* Put the the Domain Model in the very center of your Layered Architecture ([Onion](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/) / [Hexagonal](http://alistair.cockburn.us/Hexagonal+architecture))\r\n* Explicitly set boundaries for parts of your application ([BoundedContexts](https://en.wikipedia.org/wiki/Domain-driven_design#Bounded_context) / [MicroServices](http://martinfowler.com/articles/microservices.html))\r\n* Separation of concerns using Commands and Queries ([CQRS](http://msdn.microsoft.com/en-us/library/jj554200.aspx))\r\n* Capture all changes to your application state as a sequence of events ([EventSourcing](http://martinfowler.com/eaaDev/EventSourcing.html) / [DomainEvents](http://www.udidahan.com/2009/06/14/domain-events-salvation/))\r\n\r\n\r\n## A Note on DDD\r\n\r\nPlease keep in mind that eventric.js supplies you only with a structure that has common-sense in the DDD+CQRS community. But you really should get to know the tactical side of DDD as well, which is at least as important (and fun!) as the technical BuildingBlocks. When you dive into the topic you will quickly learn that the BoundedContext is mostly refered to as a tactical pattern. We decided to make it a technical pattern too because we think that it will help grasp the concept.\r\n\r\n\r\n## Getting started\r\n\r\nFor this example we use `MongoDB`. So a prerequisite is to install it locally. If its up and running we need the `eventric` and `eventric-store-mongodb` npm packages.\r\n\r\n\r\n```\r\nnpm install eventric\r\nnpm install eventric-store-mongodb\r\n```\r\n\r\n\r\nInitialize the Store and configure eventric to use it.\r\n\r\n```javascript\r\neventric = require('eventric');\r\n\r\neventricMongoDbStore = require('eventric-store-mongodb');\r\neventricMongoDbStore.initialize(function() {\r\n  eventric.set('store', eventricMongoDbStore);\r\n});\r\n```\r\n\r\n\r\n### [Setup BoundedContext](https://github.com/efacilitation/eventric/wiki/eventric#eventricboundedcontext)\r\n\r\nHaving discussed the upcoming **TodoApp Project** with the Business-Experts and fellow Developers it got clear that we should start with a `BoundedContext` named `Collaboration`.\r\n\r\n```javascript\r\ncollaboration = eventric.boundedContext({name: 'collaboration'})\r\n```\r\n\r\n### [Define the Event]()\r\n\r\nInside of our `Collaboration` Context things will happen which are called DomainEvents. A technique to come up with these is called [EventStorming](http://ziobrando.blogspot.co.uk/2013/11/introducing-event-storming.html). Lets add one called `TodoDescriptionChanged`.\r\n\r\n```javascript\r\ncollaboration.addDomainEvent('TodoDescriptionChanged', function(params) {\r\n  this.description = params.description;\r\n})\r\n```\r\n\r\n\r\n### [Adding an Aggregate](https://github.com/efacilitation/eventric/wiki/BoundedContext#addaggregate)\r\n\r\nNow we need an Aggregate which actually raises this DomainEvent and is able to handle it. Lets add it.\r\n\r\n```javascript\r\ncollaboration.addAggregate('Todo', function() {\r\n  this.changeDescription = function(description) {\r\n    this.$raiseDomainEvent('TodoDescriptionChanged', {description: description})\r\n  }\r\n  this.handleTodoDescriptionChanged = function(domainEvent) {\r\n    this.description = domainEvent.payload.description;\r\n  }\r\n});\r\n\r\n```\r\n> Hint: `this.$raiseDomainEvent` is dependency injected and the handle method is called by naming convention after raising.\r\n\r\n\r\n### [Adding CommandHandlers](https://github.com/efacilitation/eventric/wiki/BoundedContext#addcommand)\r\n\r\nTo actually work with the `BoundedContext` from the outside world we need `CommandHandlers`. Let's start by adding a simple one that will create an instance of our `Todo` Aggregate.\r\n\r\n```javascript\r\ncollaboration.addCommandHandler('createTodo', function(params, callback) {\r\n  this.$aggregate.create({\r\n    name: 'Todo'\r\n  }).then(function(aggregateId){\r\n    callback(null, aggregateId);\r\n  })\r\n});\r\n```\r\n> Hint: `this.$aggregate` is dependency injected\r\n\r\nIt would be nice if we could change the description of the `Todo`, so let's add this `CommandHandler` too.\r\n\r\n```javascript\r\ncollaboration.addCommandHandler('changeTodoDescription', function(params, callback) {\r\n  this.$aggregate.command({\r\n    name: 'Todo',\r\n    id: params.id,\r\n    methodName: 'changeDescription',\r\n    methodParams: [params.description]\r\n  }).then(function() {\r\n    callback(null, null);\r\n  });\r\n});\r\n```\r\n\r\n\r\n### [Adding a DomainEventHandler](https://github.com/efacilitation/eventric/wiki/BoundedContext#adddomaineventhandler)\r\n\r\nAnd last but not least we want to console.log when the description of the `Todo` changes.\r\n\r\n```javascript\r\ncollaboration.addDomainEventHandler('TodoDescriptionChanged', function(domainEvent) {\r\n  console.log(domainEvent.payload.description);\r\n});\r\n```\r\n\r\n\r\n### Executing [Commands](https://github.com/efacilitation/eventric/wiki/BoundedContext#command)\r\n\r\nInitialize the Context, create a `Todo` and tell the `Todo` to change its description.\r\n\r\n```javascript\r\nvar todoId = null;\r\ncollaboration.initialize(function() {\r\n\r\n  collaboration.command({\r\n    name: 'createTodo'\r\n  }).then(function(todoId) {\r\n    return collaboration.command({\r\n      name: 'changeTodoDescription',\r\n      params: {\r\n        id: todoId,\r\n        description: 'Do something'\r\n      }\r\n    })\r\n  });\r\n\r\n});\r\n```\r\nAfter executing the Commands the DomainEventHandler will print `Do something`. Your `Todo` Aggregate is now persisted using EventSourcing.\r\n\r\nCongratulations, you have successfully applied DDD and CQRS! :)\r\n\r\n\r\n## Running Tests\r\n\r\nTo execute all (client+server) tests, use:\r\n\r\n```shell\r\ngulp spec\r\n```\r\n\r\nYou can watch for file-changes with\r\n\r\n```shell\r\nNODE_ENV=workstation gulp watch\r\n```\r\n\r\n\r\n## License\r\n\r\nMIT\r\n\r\nCopyright (c) 2013-2014 SixSteps Team, eFa GmbH\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}